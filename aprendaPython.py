# -*- coding: utf-8 -*-
"""APRENDA PYTHON

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a-rAPFWe5i-TeUrWPvbE9hFocop_KAVv
"""

print('Hello, Python')

x = 1
y = 200

total = y/2
resultado_parcial = y+x
final = total*resultado_parcial

print(total,'-',resultado_parcial,'-',final)

"""# **NÚMEROS**"""

a, b, c, d= 1, 2, 3, 4
print("{},{},{},{},{}".format(a,b,c,d,a+b))
print(a)

adição:	  +
subtração:	-
multiplicação:	*
divisão:	/
exponenciação:	**
parte inteira:	//
módulo: 	%

2 + 2

4 * 3.75

50 - 5*6

(50 - 5*6) /4

8 / 5

5 // 5

8 % 5

8**2

a = 25**(1/2) #RAIZ QUADRADA DE 25
b = 127**(1/3) #RAIZ CUBICA DE 123
print( a,'\n',b)

a = int(input('Digite o 1º valor: '))
b = int(input('Digite o 2º valor: '))

s = a + b
m = a * b
d = a / b
di = a // b
e = a ** b
r = a % b
r2 = a ** (1/2)

print('A soma é {}, a multiplicação é {} e a divisão é {} e a parte inteira é {} .'.format(s,m,d,di), end = ' >>> ')

# ( xxx, end = ' >>> ') não quebrar linha.

print('A potência é {}, o resto é {} e a raiz quadrada é {:.3f} '.format(e,r,r2))

#{:.3f} usar 3 casas decimais.

"""# **EXERCICIOS**

sucessor e antecessor
"""

a = int(input('Digite o numero: '))
su = a+1
an = a-1

print('O sucessor do numero {} é {}, e seu antecessor {}. '.format(a,su,an))

"""dobro, triplo e r²"""

a = float(input('Digite o numero: '))
d = float(a*2)
t = float(a*3)
a2 = float(a**2)

print('O dobro é {}, o triplo é {} e a raiz quadrada é {} !'. format(d,t,a2))

"""Média"""

a = float(input('Digite a primeira nota: '))
b = float(input('Digite a segunda nota: '))
m = float((a+b)/2)

print('A média do aluno é {}.'.format(m))

"""Conversão de Metro p/ centimetro e milimetros"""

m = float(input('Digite a medida em metros: '))
c = m*100
ml = m*1000

print('A conversão é, {} centimetros e {} milimetros.'.format(c,ml))

"""tabuaba do numero inteiro"""

a = int(input('Digite o numero inteiro: '))

print('-'*12)
print(f'{a} x {1:2} = {a*1}')
print('{} x {:2} = {} '.format(a,2,a*2))
print('{} x {:2} = {} '.format(a,3,a*3))
print('{} x {:2} = {} '.format(a,4,a*4))
print('{} x {:2} = {} '.format(a,5,a*5))
print('{} x {:2} = {} '.format(a,6,a*6))
print('{} x {:2} = {} '.format(a,7,a*7))
print('{} x {:2} = {} '.format(a,8,a*8))
print('{} x {:2} = {} '.format(a,9,a*9))
print('{} x {:2} = {} '.format(a,10,a*10))
print('-'*12)

"""REAL PARA DOLLAR"""

r = float(input('Quantos Reais você tem? '))

d = float((5.11*r))

print ('Você tem ${} dólares'.format(d))

"""PINTANDO PAREDE"""

a = float(input('Digite a altura da parede: '))
l = float(input('Digite a Largura da parede: '))

m2 = a*l
t = 2
t2 = m2/t

print('Sua parede tem {} m², cada lata de tinta cobre {} m², você irá precisar de {} latas de tinta.'.format(m2,t,t2))

"""desconto de 5%"""

a = float(input('Qual o valor do produto?: R$ '))
d = (a * 0.05)
vf = a - d

print('O valor do produto com o deconto de 5% é R$ {}'.format(vf))

"""Aumento de 15%"""

s = float(input('Digite o seu salário: R$ '))
s1 = s * 0.15
sf = s + s1

print('O seu salário com o aumento de 15% é R$ {}'.format(sf))

"""TEMPERATURA"""

c = float(input('Qual é a temperatura em °C '))

f = float((c*(9/5)+32))

print('Em fahrenheit é {} °F'.format(f))

"""ALUGUEL DE CARRO"""

dias = float(input('Quantos dias você alugou o carro? '))
klm = float(input('Quantos Kilometros que você andou com o carro? '))

valorA = float(60*dias + 0.15*klm)

print('O valor do aluguel ficou em R$ {} '.format(valorA))

"""PARTE INTEIRA"""

import math

num = float(input('Digite o número real ' ))
i = math.ceil(num)

print('O a parte inteira de {} é {} '.format(num, i))

"""HIPOTENUSA"""

import math

x = float(input('Digite o lado X do triângulo retangulo: '))
y = float(input('Digite o lado y do triangulo retangulo: '))

h = math.hypot(x, y)

print('A hipotenusa é {}'.format(h))

"""sen, cos, tan"""

import math

a = float(input('Digite o ângulo: '))

s = math.sin(a)
c = math.cos(a)
t = math.tan(a)

print('O seno do ângulo é {}, o cosseno é {} e a tangente é {}. '.format(s,c,t))

"""sortear aluno

"""

import random

a = random.choice(['José', 'Antonio', 'Karem', 'Maria'])

print('Quem vai',a)

#consult dollar quote with python
#
import requests
import json

res = requests.get('http://economia.awesomeapi.com.br/json/all/USD-BRL')

# res.status_code = if the request is successful it will return 200

if res.status_code == 200:
  dolar = res.json()['USD']['low']
  print(f'O valor do dólar é {dolar}')
else:
  print('Erro ao buscar valor do dólar')

from math import factorial

n = int(input("Digite um numero, jovem!"))
f = factorial(n)

print("O fatorial de {} é {}".format(n, f))

def fatorial(x):
  f = 1
  for i in range(1, x + 1):
    f *= i
  return f

x = int(input("Digite um número: "))

print(f"O Fatorial de {x} é {fatorial(x)}")

def find_sum(max_value):
  sum_value = 0
  for i in range(1, max_value + 1, 100000):
    sum_value += sum(range(i, min(i + 100000, max_value + 1)))
  return sum_value

max_value = 1000000000
sum_value = find_sum(max_value)
print(f"The sum of integers from 1 to {max_value} is {sum_value}")

"""Se o valor máximo for 1 bilhão, o código simples que você forneceu levará muito tempo para executar. Isso porque o loop for itera sobre cada inteiro de 1 a 1 bilhão, o que é um total de 1 bilhão de iterações."""

def find_sum(max_value):
  sum = 0
  for i in range(1, max_value + 1):
    sum += i
  return sum

max_value = int(input("Digite o valor: "))
print(f"A soma dos valores dos inteiros de 1 até {max_value} é {find_sum(max_value)}")

"""Para reduzir o tempo de execução, podemos usar um algoritmo mais eficiente. Um algoritmo eficiente para calcular a soma de inteiros de 1 a um valor máximo é a fórmula de Gauss:

S = (n * (n + 1)) / 2
"""

def find_sum(max_value):
  """
  Calcula a soma de inteiros de 1 a um valor máximo especificado.

  Argumentos:
    max_value: O limite superior para a soma (inclusivo).

  Retorna:
    A soma de inteiros de 1 a max_value.
  """

  # Declara uma variável para armazenar a soma.
  soma = 0

  # Calcula a soma usando a fórmula de Gauss.
  soma = (max_value * (max_value + 1)) / 2

  # Retorna a soma.
  return soma

# Exemplo de uso
max_value = 100000000000000000000000000000
soma = find_sum(max_value)
print(f"A soma de inteiros de 1 a {max_value} é {soma}")

"""# **MÓDULOS**"""

import math # importou toda a biblioteca math
num = int(input('Digite um número: '))

raiz = math.sqrt(num)

print('A raiz de {} é igual a {:.2f}'.format(num, raiz))

from math import sqrt, floor #importou somente a função sqrt da biblioteca math

num = int(input('Digite um numero: '))
raiz = sqrt(num) #o metodo veio diretamente para a pasta, não é preciso utilizar o "math."

print('A raiz de {} é igual a {}'.format(num, floor(raiz)))

import random
num = random.random()
num2 = random.randint(1, 10)

print(num)
print(num2)

pip install emoji --upgrade #instalando biblioteca de emojis

import emoji
print(emoji.emojize('Olá Mundo! :thumbs_up:'))

"""# **Atribuições de variáveis**"""

a = 2 # = atribuir valor a uma variável
b = 3

b * a

a, b = 2, 3

a * b

#modo correto de expressar o sinal negativo de um número

(-3)**2

#O valor da última expressão exibida é atribuida  ao

tax = 12.5 / 100
price = 100.50

tp = price * tax

round(tp, 2)

"""# **STRINGS**"""

# Para criar uma string só precisa usar aspas simples ou duplas
'Hello World'

# a a maneira correta para imrimir uma string é usar o print()
print('Hello World 1')

# use o \n para inserir nova linha
a = "Hi!\nHello World \nNova Linha"

print(a)

#podemos usar a função len() para verificar o comprimento de uma string
len('Hello World')

#usamos colcheites após um objeto para chamar o índice

word = 'Python'

print('1 -',word[0]) #character in position 0

print('2 -',word[5]) #character in position 5

print('3 -',word[-1]) #counting starts on the right wiht the operador -

print('4 -',word[-2])

print('5 -',word[:-1]) #catch every,the last no

print('6 -',word[0:2]) #characters from the position 0 is included and position 2 is excluded

print('7 -',word[-2:]) #characters from second-last is included to the end

print('8 -',word[:2] + word[2:])

print('9 -',word[::2]) #take two by two

print('10 -',word[::-1].upper) #reverse

print('11 -',word[:1:-1])

a = 'Python'

print(a[::-1])

print(a[6:])

print(len(a))

#As strings possuem uma propriedade de imutabilidade
a = 'hello world'

a[0] = 'A'

print(a)

# porem, elas podem ser concatenadas
a = 'Hello World'

a = a + ' Good Morning'

print(a)

#podemos usar o símbolo de multiplicação para criar repetições
g = 'Google '

g*8

"""Métodos embutidos em strings

"""

#métodos: objeto.método(parâmetro)
a = "Hello World"

print(a.upper()) #caixa alta

print(a.lower()) #caixa baixa

print(a.split()) #divide a string

print(a.split('o')) #divide a string, e remove elemento expecifico

a = "Hello Python"

print(a.split())

print(a.upper())

"""# **FORMATAÇÃO DE IMPRESSÃO**"""

#Básico
print('Hi, i\'m Python')

#Podemos usar o %s para formatar strings em suas instruções de impressão
a = 'Eduardo'
print('\nMy name is %s'%(a))

#pontos flutuantes. usam o formto %n1.n2f: n1 = numero minimo total de digitos que a cadeia deve conter
#n2 são as quantidas de numeros que devem aparecer após o ponto decimal.(pode ser em branco se não possuir muitos numeros)
print('\nNúmeros flutuantes: %0.2f' %(1888.1555))

print('\nNúmeros flutuantes: %0.4f' %(1888.1555))

"""Métodos de formato de conversão"""

# Os dois métodos %s e %r, convertem quase qualquer objeto Pytho em uma string usando dois métodos separados: str() e repr().
print('Here is a number: %s and Here is a string: %s' %(123.5, 'Hi'))

print('Here is a number: %r and Here is a string: %r' %(123.5, 'Hi'))

#formatações multiplas
print('One: %s, Two: %1.3f and Three: %r' %('First', 12.45678, 22))

"""Melhor maneira de formatar objetos: **string.format()**





"""

#sintaxe: ' String aqui {variavel}'.format(variavel = alguma coisa')


print('Python is very {}'.format('good'))

print('\none: {y}; two: {y}; three: {y}'.format(y= 'Python'))

print('\n1 - {a}; 2 - {b}; 3 - {c} '.format(a = 'amendoin', b = 'abacaxi', c = 'banana'))

print('O diâmetro da {a} é de {b} kilômetros.'.format(a= 'Terra', b = 12742))

p = 'Terra'
d = 12742

print('\nO diâmetro da {} é de {} Kilômetros.'.format(p, d))

"""teste"""

n0 = input('Olá, qual o seu nome?')

print('Bem vindo {}!'.format(n0))

n1 = int(input('Digite o primeito número inteiro: '))
n2 = int(input('Digite o segundo número inteiro: '))

s = n1 + n2

print('A soma entre {} e {} é: {}'. format(n1, n2, s))

n = input("Digite algo: ")
print(n.isnumeric()) #tell me if it´s a number
print(n.isalpha()) #Tell me if it´s a letter
print(n.isalnum()) #Tell me if it´s is a alpha numeric

n = input('Digite algo: ')

print('Qual é o tipo?', type(n))
print('Está em maisculo?', n.isupper())
print('Está capitalizada?', n.istitle())
print('É Alpha numerico?', n.isalnum())
print('È uma palavra?', n.isalpha())
print('É um caractere ASCII?', n.isascii())
print('É decimal?', n.isdecimal())
print('É um digito?', n.isdigit())
print('É identificavél?', n.isidentifier())
print('Está em minusculo?', n.islower())
print('É numerico?', n.isnumeric())
print('É printavel?', n.isprintable())
print('É espaço?', n.isspace())

nome = input('Qual é o seu nome? ')
#1: {:20} dar 20 espacos;
#2: {:>20} alinhar a direita dos vinte espaços;
#3: {:<20} alinhar a esquerda dos vinte espaços;
#4: {:^20} alinha no centro dos 20 espaços;
#5 - {:=^20} alinhar entre os sinais de iguais!
print('Prazer em te conhecer {:=^20}!'.format(nome))

"""# **IF, ELIF, ELSE**

"""

#  if case1:
#    perfom action1
#  elif case2:
#    perform action2
#  else:
#    perform action3
if True:
  print('It was true!')

x = False

if x:
  print('x was true!')
else:
  print('I will be printed in any case where x is not true')

# múltiple branches

loc = 'bank'

if loc == 'Auto Shop':
 print('Welcome to the Auto Shop')
elif loc == 'bank':
 print ('Welcome to the bank')
else:
 print("Where are you?")

a = input('Digite o primeiro numero: ')
b = input('Digite o segundo numero: ')
c = input('Digite o terceiro numero: ')

"""#**FOR**"""

l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for i in l:
 print(i)

#checking if the number is par
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for i in l:
 if i % 2 == 0:
  print(i)

#creat a loop to summarize the list
l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

list_sum = 0

for i in l:
  list_sum = list_sum + i

print(list_sum)

"""Strings are sequences, when we iterate trought them, we are acessing each item in the string."""

for letter in ' This is a string.':
 print(letter)

#Tuplas
tup = (1,2,3,4,5)

for t in tup:
  print(t)

#printing tuplas from the list
l = [(2,5), (8,9), (7,3)]

for tup in l:
  print(tup)

#unpacking: printing a tuple item
for (tup1, tup2) in l:
  print(tup1)

#unpacking trought the dictionary

d = {'k1':1, 'k2':2, 'k3':3}

for item in d:
  print(item)

#printing keys and values
for k,v in d.items():
  print(k)
  print(v)

"""#**WHILE**

"""

x = 0  # x has been defined

while x < 10:  # defined loop
  print('x is currently: ', x)
  print(' x is stll less than 10, adding  1 to x')
  x += 1 # will add one to x after each repeat, until it reaches the value

if x == 10:
  print('x now is 10')

x = 0

while x < 10:
  print('x is currently: ', x)
  print(' x is stll less than 10, adding  1 to x')
  x += 1
  if x == 3:
    print('x == 3')
  else:
    print('continuing...')
    continue

x = 0

while x < 10:
  print('x is currently: ', x)
  print(' x is stll less than 10, adding  1 to x')
  x += 1
  if x == 3:
    print('breaking because x == 3')
    break
  else:
    print('continuing...')

"""#**RANGE**

Allows us to create a sequence of numbers that range from a starting point to an ending point. You can also specify the step size.
"""

range(0, 10)
#the funtion does not pruduce a list, we need to inform you that we want it
# to be converted to a list.

list(range(0, 10))

r = range(0, 18, 2)

list(r)

# we can integrate about it in a for
for i in range(0, 10):
  print(i)

r = range(1, 51) #I started from q because 0 is multiple of 5 and 3.

for i in r:
  if i % 3 == 0 and i % 5 == 0:
    print(i, '- FizzBuzz')
  if i % 3 == 0:
    print(i, '- Fizz')
  if i % 5 == 0:
    print(i, '- Buzz')

"""#**FUNÇÕES**"""

SINTAXE: def name_of_function(arg1, arg2):

          function doc

          Do something here

          return

def say_hello(): #The function has been defined
  print('Hello')

say_hello() #call the function

def greeting(name):
  print('Hello, %s' %name)
greeting('Rodrigo')

def greeting():

  name = input('Hi, what\'s your name?\n ')
  lname = input('And your last name?\n')

  print('Hello, %s %s' %(name, lname))

greeting()

def add_num(num1, num2):
  return num1+num2

result = add_num(4,9)
result2 = add_num('\n''one', 'two') #\n next line

print(result, result2)

def is_prime(num):

  for n in range(2, num):
    if num % n == 0:
      print('It is not prime number')
      break
    else:
      print('Is prime number')

is_prime(5)

def is_prime(num):

  x = 0 #creat to do repeat numbering

  for i in range(1, num + 1): #
    if num % i == 0:
      print('\033[32m', end = '') #end = '' It's for each to stand by each other ;
      x += 1                      #\033[32m color green
    else:
      print('\033[31m', end = '') #\033[33m color red
    print('{} '.format(i), end = '')
  print('\n\033[39mThe number {} was divisible {} times'.format(num, x))
  if x == 2:
    print('So it is a prime number!')
  else:
    print('So it is not a prime number!')

is_prime(11)

"""# **LISTA**

1- recomendado para estruturas homogeneas, lista com elementos do mesmo tipo.
2 - Sintaxe []
3 - Mutáveis
4 - Mais lentas que tuplas (notável com muitos elementos), usa muitas operações.
5 - manter ordem
6 - lista mutável, pode substituir (nome_da_lista[localização: 0,1,2....)] = item_novo), adicionar (nome_da_lista.append) e remover (nome_da_lista.pop) elementos.
"""

# o len vai dizer quantos itens tem na lista
l = [1, 2, 3]
l1 = [1, 'amendoin', 15.666]

len(l)

#indexar e cortar funciona nas listas igual nas strings
lista = ['one', 'two', 'three', 4.55]

print(lista[0])

print(lista[:3])

#podemos usar o concatenar

print(lista + ['new'])

print(lista*2)

# Usando o append() podemos anexar um item permanentemente
lista = ['one', 'two', 'three', 4.55]

lista.append('dril')

print(lista)

# O pop() retira um item permanentemente, por padrão o último item da lista, mas, podemos espeíficar.

lista.pop()

print(lista)

popped_item = lista.pop(0) # atribuir o item retirado

print(popped_item)

print(lista)

#podemos usar os métodos sort() e reverse()
a = ['x', 'b', 'c', 'a']

a.sort() #nesse caso ordena em ordem alfabetica

print(a)

a.reverse() #inverte a lista

print(a)

"""LINHAS ANINHADAS

"""

# PODEMOS COLCOAR UMA SLISTA DENTRO DE OUTRA LISTA.
l1 = [1,2,3]
l2 = [4,5,6]
l3 = [7,8,9]

matrix = [l1, l2, l3]

print(matrix)

#podemos usar a indexação
print(matrix[0]) #pegar o primeiro item da matrix

print(matrix[0][0]) #pegar o primeiro item do primeiro item da matrix

l = [5,3,4,6,1]

l.sort()

print(l)

"""# **TUPLAS**

1 - imutáveis
2 - Sintax: ()
3 - Mais rápidas que lista
4 - ordem importa
"""

# AS TUPLAS SÃO PARECIDAS COM AS LISTAS, PORÉM, SÃO IMUTÁVEIS.

t = (1,2,3)

print(len(t)) #o metodo len() funciona

print(t[0]) #  aindexaão funciona tambem

#a tupla tem alguns métodos internos, poém menos que a lista.
print(t.index(1)) #coloque o valor do parâmetro para retornar o índice do mesmo.

print(t.count(3)) #var.count(), ver o numero de vezes que o item aparece na tupla

#elas são imutaveis
t = (1,2,3)
t[0] = 9

print(t)

#elas são imutaveis
t = (1,2,3)
t.append(9)

print(t)

#convertendo uma lista para uma tupla: tuple(var)

l = [1,2,3,4,5,6, 'a']

tuple(l)

"""# **SET**

1 - Armazena elementos não ordenados e sem índices
2 - Não permite duplicatas
3 - São como os conuuntos da matemática
4 - Rápidos
"""

# OS SETS SÃO UMA COLEÇÃOS NÃO ORDENADA DE ELEMENTOS ÚNICOS. set()

x = set()

#se adiciona um elemento ao set usando o método add()
x.add('amendoa')

print(x)

x.add(3)

print(x)

x.add(3) #cnão é possivel adicionar mais de um do mesmo item.

print(x)

#podemos usar o método set() para pegar os itens unicos de uma lista

l = [1,1,1,2,2,5,5,5,8,9,9,9]

l = set(l)

print(l)

"""# **DICIONÁRIOS**

MAPEAMENTO: Coleção de objetos que são armazenados por uma chave. Não reterão a ordem pois possuem objetos definidos por uma chave.
* 1 - SEM ORDEM
* 2 - RÁPIDOS
* UMA CHAVE VAI SER ASSOCIADA A UM DETERMINADO VALOR: {'key1': 'value1'}
tabela hash
"""

#sintaxe: {'key':'value'}
my_dict = {'key1':'value1','objeto': 'cadeira', 'num': 123.888}

print(my_dict['objeto'])

#podemos chamar um item de uma lista m refenrecia a uma chave
dict2 = {'comida':['arroz', 'feijão'], 'obj':'cadeira', 'num': 22}

print(dict2['comida'][0])

#podemos usar alguns métodos
print(dict2['comida'][0].upper())

#podemos alterar valores
dict2['num'] = dict2['num'] - 22
print(dict2['num'])

#podemos alterar valores DESS FORMA, POREM ELE ATRIBUI O SINAL AO SEU VALOR E NÃO FAZ A OPERAÇÃO MATEMATICA.
dict2['num']-=22
print(dict2['num'])

#podemos criar chaves por atribuição, criando um dicionário vazio.

d = {}

d['animal'] = 'Dog'
d['answer'] = 42

print(d)

#aninhamento de dicionário

d = {'key1':{'nestkey':{'subnestkey':'value'}}}

print(d['key1']['nestkey']['subnestkey'])

# var.keys() chama as chaves do dicionario, var.values() chama os valores e Var.items() retorna as tuplas.

d = {'key1':1, 'key2':2, 'key3': 3}

print(d.keys())

print(d.values())

print(d.items())

hash("edu")

def fib(x):
  if x < 2:
   return 1
  else:
   x(x-1) + x(x - 2)

x = 4

print(x)

"""#**ARRAY**"""

# prompt: de exemplos de códigos array

# Create an array of integers
arr = [1, 2, 3, 4, 5]

# Access an element of the array
print(arr[2])

# Change an element of the array
arr[1] = 10

# Print the array
print(arr)

# Get the length of the array
print(len(arr))

# Add an element to the end of the array
arr.append(6)

# Print the array
print(arr)

# Remove an element from the end of the array
arr.pop()

# Print the array
print(arr)

# Remove an element from the middle of the array
del arr[2]

# Print the array
print(arr)

# Sort the array
arr.sort()

# Print the array
print(arr)

# Reverse the array
arr.reverse()

# Print the array
print(arr)
